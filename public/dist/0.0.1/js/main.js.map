{
  "version": 3,
  "sources": ["../../../../src/client/views/pages/loader-page.ts", "../../../../src/client/views/layouts/default-layout.ts", "../../../../src/client/helpers/view-helpers.ts", "../../../../src/client/main.ts"],
  "sourcesContent": ["import { View } from '../view.ts';\n\nimport { mount, unmount } from '../../utils.ts';\n\nexport class LoaderPage implements View {\n  protected static page: LoaderPage | null = null;\n\n  protected node: HTMLElement | null = null;\n\n  static get instance(): LoaderPage {\n    if(!LoaderPage.page) {\n      LoaderPage.page = new LoaderPage();\n    }\n\n    return LoaderPage.page;\n  }\n\n  get elem(): HTMLElement | null {\n    return this.node;\n  }\n\n  async init(parent: HTMLElement | null, firstTime: boolean) {\n    let content = parent || document.body;\n\n    this.node = content.querySelector('[data-page=\"loader-page\"]');\n\n    return content;\n  }\n\n  async mount() {\n    await mount(this.node);\n  }\n\n  async unmount() {\n    await unmount(this.node);\n  }\n}\n", "import { BaseLayout } from \"./base-layout.ts\";\n\nexport class DefaultLayout extends BaseLayout {\n  protected static layout: DefaultLayout | null = null;    \n\n  static get instance(): DefaultLayout {\n    if(!DefaultLayout.layout) {\n      DefaultLayout.layout = new DefaultLayout();\n    }\n\n    return DefaultLayout.layout;\n  }\n}\n", "import { Page } from 'router/src/data/page.ts';\n\nimport { Translator } from 'i18n/src/translator.ts';\n\nimport { RouteOptions } from '../data/route-options.ts';\nimport { RouteState } from '../data/route-state.ts';\n\nimport { BaseLayout } from '../views/layouts/base-layout.ts';\nimport { DefaultLayout } from '../views/layouts/default-layout.ts';\n\nimport { LoaderPage } from '../views/pages/loader-page.ts';\n\nimport { toCamel } from '../../utils.ts';\n\nimport { layouts as globalLayouts, context, languages, views } from '../globals.ts';\n\nexport function hideSplash() {\n  const splashElem = document.querySelector('.splash');\n\n  splashElem?.classList.remove('splash-open');   \n}\n\nexport function getExistingLayout(layouts: string[]) {\n  let layout: BaseLayout = DefaultLayout.instance;\n\n  for(const layoutName of layouts) {\n    if(layoutName in globalLayouts) {\n      layout = globalLayouts[layoutName];\n\n      break;\n    }\n  }\n\n  return layout;\n}\n\nexport async function initLayouts(layouts: string[], parent: HTMLElement | null, firstTime: boolean) {\n  const firstLoad: {\n    [key: string]: boolean\n  } = {};\n\n  for(const layout of layouts) {\n    if(!(layout in globalLayouts)) {\n      const module = await import(`./views/layouts/${layout}.js?time=${Date.now()}`) as any;\n\n      parent = await module[toCamel(layout)]?.instance?.init?.(parent, firstTime);\n\n      globalLayouts[layout] = module[toCamel(layout)]?.instance;\n\n      firstLoad[layout] = true;\n    }\n  }\n\n  return firstLoad;\n}\n\nexport async function loadLayouts(\n  lang: string,\n  page: Page<RouteOptions, RouteState>,\n  layouts: string[], \n  firstLoad: {\n    [key: string]: boolean\n  }\n) {\n  const reverseLayouts = [...layouts].reverse();\n\n  let parentLayout = DefaultLayout.instance;\n  \n  for(const layout of reverseLayouts) {\n    if(parentLayout['content'] !== globalLayouts[layout]) {\n      await parentLayout.replaceContent(globalLayouts[layout]);\n    }\n\n    await globalLayouts[layout].load?.(lang, page, firstLoad[layout] ?? false);\n\n    parentLayout = globalLayouts[layout];\n  } \n  \n  return parentLayout;\n}\n\nexport async function loadPage(\n  lang: string,\n  page: Page<RouteOptions, RouteState>, \n  name: string, \n  layouts: string[], \n  firstTime: boolean\n) {\n  context.page = page;\n\n  let parent: HTMLElement | null = null;\n\n  let pageFirstLoad = false;\n\n  if(!firstTime && (!(lang in languages) || !(name in views))) {\n    const layout = getExistingLayout(layouts);\n\n    if(layout['content'] !== LoaderPage.instance) {\n      await layout.replaceContent(LoaderPage.instance);\n    }\n  } \n\n  if(!(lang in languages)) {\n    const module = await import(`./locales/${lang}.js?time=${Date.now()}`);\n\n    languages[lang] = Translator.create(module.default);\n  }\n\n  context.tr = languages[lang].translate.bind(languages[lang]);\n\n  document.documentElement.lang = lang;\n  document.title = context.tr('My Routes');\n\n  if(!(name in views)) {       \n    const module = await import(`./views/${name}.js?time=${Date.now()}`) as any;\n\n    parent = await module[toCamel(name)]?.instance?.init?.(parent, firstTime);\n\n    views[name] = module[toCamel(name)]?.instance;\n\n    pageFirstLoad = true;\n  }\n\n  const firstLoad = await initLayouts(layouts, parent, firstTime);\n\n  if(context.page.fragment === page.fragment) {\n    const layout = await loadLayouts(lang, page, layouts, firstLoad);    \n\n    if(layout['content'] !== views[name]) {\n      await layout.replaceContent(views[name]);\n    }\n\n    await views[name].load?.(lang, page, pageFirstLoad);\n  }\n\n  if(firstTime) {\n    hideSplash();\n  }\n}\n", "import { LoaderPage } from './views/pages/loader-page.ts';\n\nimport { loadPage } from './helpers/view-helpers.ts';\n\nimport { localeRoute } from '../utils.ts';\n\nimport { router, routeNavigator } from './globals.ts';\nimport { DEFAULT_LANGUAGE } from '../globals.ts';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  let firstTime = true;    \n\n  LoaderPage.instance.init(null, firstTime);\n\n  router.addRoutes([{\n    rule: `${localeRoute}/?`,\n    async handler(page) {\n      await loadPage(\n        page.match?.[0] || DEFAULT_LANGUAGE,\n        page, 'home-page', \n        ['main-layout'],\n        firstTime\n      );\n    }\n  }, {\n    rule: `${localeRoute}/?sign-in`,\n    async handler(page) {\n      await loadPage(\n        page.match?.[0] || DEFAULT_LANGUAGE,\n        page, \n        'sign-in-page', \n        [], \n        firstTime\n      );\n    }\n  }, {\n    rule: `${localeRoute}/?sign-up`,\n    async handler(page) {\n      await loadPage(\n        page.match?.[0] || DEFAULT_LANGUAGE,\n        page, \n        'sign-up-page', \n        [], \n        firstTime\n      );\n    }\n  }]);\n\n  routeNavigator.addUriListener();\n\n  router\n    .processUrl(routeNavigator.fragment, routeNavigator.query)\n    .catch(\n      reason => console.error(reason)      \n    )\n    .finally(() => firstTime = false);\n});\n"],
  "mappings": "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",
  "names": []
}
